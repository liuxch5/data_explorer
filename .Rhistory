coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(title = paste0(title[option],"\n", "Reference Period: ", selectedDate), paste0("Reference Period: ", selectedDate))
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(title = paste0(title[option],"\n", "Reference Period: ", selectedDate))
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(title = title[option])
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(title[option])
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(paste0(title[option], "\n", "Reference Period: ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(paste0(title[option], "Reference Period: ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(title[option],subtitle = paste0("Reference Period: ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
?ggtitle
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(title = title[option],subtitle = paste0("Reference Period: ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
plottitle <- c("Government Debt in Percent of GDP", "Government Debt in EUR Millions", "GDP in EUR Millions", "Total Unemployment Rate")
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(title = plottitle[option],subtitle = paste0("Reference Period: ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(plottitle[option], subtitle = paste0("Reference Period: ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(paste0(plottitle[option], "in ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(paste0(plottitle[option], " in ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
# input
option <- 2
mapwithdata <- merge(my_map, datasets[[option]][datasets[[option]]$time==selectedDate, ], by.x = "region", by.y = "geo", all.x = TRUE) %>%
rename(Country = region, Value = values) %>% arrange(order)
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(paste0(plottitle[option], " in ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
# input
option <- 3
mapwithdata <- merge(my_map, datasets[[option]][datasets[[option]]$time==selectedDate, ], by.x = "region", by.y = "geo", all.x = TRUE) %>%
rename(Country = region, Value = values) %>% arrange(order)
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(paste0(plottitle[option], " in ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
# input
option <- 4
selectedDate <- max(datasets[[option]]$time)
mapwithdata <- merge(my_map, datasets[[option]][datasets[[option]]$time==selectedDate, ], by.x = "region", by.y = "geo", all.x = TRUE) %>%
rename(Country = region, Value = values) %>% arrange(order)
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(paste0(plottitle[option], " in ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
selectedDate <- as.Date("2019-04-01")
mapwithdata <- merge(my_map, datasets[[option]][datasets[[option]]$time==selectedDate, ], by.x = "region", by.y = "geo", all.x = TRUE) %>%
rename(Country = region, Value = values) %>% arrange(order)
p <- ggplot(data = mapwithdata, aes(label = Country, label2 = Value)) +
theme_bw() +
geom_polygon(aes(x=long, y = lat, group = group, fill = Value), color = "white") +
scale_fill_viridis_c(name = unit_label[option], option = "magma", direction = -1) +
coord_cartesian(ylim=c(30, 70), xlim=c(-20, 40)) +
labs(x = "Longitude", y = "Latitude") +
ggtitle(paste0(plottitle[option], " in ", selectedDate))
ggplotly(p, tooltip = c("label", "label2"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
?list
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?ifelse
# input
option <- 1
head(datasets[[option]]$time)
datasets <- list(rel_debt, tot_debt, tot_gdp, unemp)
library(maps)
library(mapdata)
library(tidyverse)
library(eurostat)
library(plotly)
my_map <- map_data("world")
get_eurostat("ei_lmhr_m") %>%
filter(geo %in% eu_countries$code,
indic == "LM-UN-T-TOT",
s_adj == "SA") %>%
select(time, geo, values) %>%
label_eurostat() %>%
mutate(geo = recode(geo, `Germany (until 1990 former territory of the FRG)` = "Germany")) -> unemp
get_eurostat("gov_10dd_edpt1") %>%
filter(geo %in% eu_countries$code) -> gov_data
gov_data %>% filter(na_item == "B1GQ", sector == "S1", unit == "MIO_EUR") %>%
select(time, geo, values) %>%
label_eurostat() %>%
mutate(geo = recode(geo, `Germany (until 1990 former territory of the FRG)` = "Germany")) -> tot_gdp
gov_data %>% filter(na_item == "GD", sector == "S13", unit == "MIO_EUR") %>%
select(time, geo, values) %>%
label_eurostat() %>%
mutate(geo = recode(geo, `Germany (until 1990 former territory of the FRG)` = "Germany")) -> tot_debt
gov_data %>% filter(na_item == "GD", sector == "S13", unit == "PC_GDP") %>%
select(time, geo, values) %>%
label_eurostat() %>%
mutate(geo = recode(geo, `Germany (until 1990 former territory of the FRG)` = "Germany")) -> rel_debt
# input
option <- 1
datasets <- list(rel_debt, tot_debt, tot_gdp, unemp)
plottitle <- c("Government Debt in Percent of GDP", "Government Debt in EUR Millions", "GDP in EUR Millions", "Total Unemployment Rate")
unit_label <- c("% of GDP", "EUR Mio", "EUR Mio", "% of Labour Force")
selectedDate <- max(datasets[[option]]$time)
selectedDate <- as.Date("2019-04-01")
head(datasets[[option]]$time)
max(datasets[[option]]$time)
max(datasets[[option]]$time) - 10
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
min(inputData()$time)
min(datasets[[1]]$time)
class(min(datasets[[1]]$time))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(maps)
library(mapdata)
library(tidyverse)
library(eurostat)
library(plotly)
library(lubridate)
library(shinyjs)
library(shinyflags)
library(countrycode)
my_map <- map_data("world")
my_map$region[which(my_map$region == "UK")] <- "United Kingdom"
get_eurostat("ei_lmhr_m") %>%
filter(geo %in% eu_countries$code,
indic == "LM-UN-T-TOT",
s_adj == "SA") %>%
select(time, geo, values) %>%
label_eurostat(countrycode = "country.name",
custom_dic = c(CZ = "Czech Republic")) -> unemp
get_eurostat("gov_10dd_edpt1") %>%
filter(geo %in% eu_countries$code) -> gov_data
gov_data %>% filter(na_item == "B1GQ", sector == "S1", unit == "MIO_EUR") %>%
select(time, geo, values) %>%
label_eurostat(countrycode = "country.name",
custom_dic = c(CZ = "Czech Republic")) -> tot_gdp
gov_data %>% filter(na_item == "GD", sector == "S13", unit == "MIO_EUR") %>%
select(time, geo, values) %>%
label_eurostat(countrycode = "country.name",
custom_dic = c(CZ = "Czech Republic")) -> tot_debt
gov_data %>% filter(na_item == "GD", sector == "S13", unit == "PC_GDP") %>%
select(time, geo, values) %>%
label_eurostat(countrycode = "country.name",
custom_dic = c(CZ = "Czech Republic")) -> rel_debt
# input
datasets <- list(rel_debt, tot_debt, tot_gdp, unemp)
plottitle <-
c(
"Government Debt in Percent of GDP",
"Government Debt in EUR Millions",
"GDP in EUR Millions",
"Total Unemployment Rate"
)
unit_label <-
c("% of GDP", "EUR Mio", "EUR Mio", "% of Labour Force")
library(shiny)
library(shinyWidgets)
library(shinythemes)
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo",
all.x = TRUE
) %>% head()
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo"
) %>% head()
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo",
all.y = TRUE
) %>% head()
?merge
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo",
all.x = TRUE
) -> test
View(test)
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo",
all = TRUE
) -> test
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
rbind(
rel_debt,
.
) -> test
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
cbind(
rel_debt,
.
) -> test
?rbind
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
rbind(list(rel_debt, .)
) -> test
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) -> test
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") -> test
View(rel_debt)
rel_debt %>%
group_by(time) %>%
summarise(values = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>% -> test
rel_debt %>%
group_by(time) %>%
summarise(values = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
select(time, geo, values) -> test
rel_debt %>%
group_by(time) %>%
summarise(values = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
select(time, geo, values) %>%
rbind(list(rel_debt, .)) -> test
str(rel_debt)
str(test)
rel_debt %>%
group_by(time) %>%
summarise(values = mean(values)) %>%
mutate(geo = factor("Mean of selected countries")) %>%
select(time, geo, values) %>%
rbind(list(rel_debt, .)) -> test
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo",
all = TRUE
) -> test
str(test)
str(rel_debt)
?coalesce
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo",
all = TRUE
) %>%
mutate(time = coalesce(time.x, time.y) -> test
rel_debt %>%
group_by(time) %>%
summarise(Mean = mean(values)) %>%
mutate(geo = "Mean of selected countries") %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo",
all = TRUE
) %>%
mutate(time = coalesce(time.x, time.y)) -> test
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(maps)
library(mapdata)
library(tidyverse)
library(eurostat)
library(plotly)
library(lubridate)
library(shinyjs)
library(shinyflags)
library(countrycode)
library(DT)
my_map <- map_data("world")
my_map$region[which(my_map$region == "UK")] <- "United Kingdom"
get_eurostat("ei_lmhr_m") %>%
filter(geo %in% eu_countries$code,
indic == "LM-UN-T-TOT",
s_adj == "SA") %>%
select(time, geo, values) %>%
label_eurostat(countrycode = "country.name",
custom_dic = c(CZ = "Czech Republic")) -> unemp
get_eurostat("gov_10dd_edpt1") %>%
filter(geo %in% eu_countries$code) -> gov_data
gov_data %>% filter(na_item == "B1GQ", sector == "S1", unit == "MIO_EUR") %>%
select(time, geo, values) %>%
label_eurostat(countrycode = "country.name",
custom_dic = c(CZ = "Czech Republic")) -> tot_gdp
gov_data %>% filter(na_item == "GD", sector == "S13", unit == "MIO_EUR") %>%
select(time, geo, values) %>%
label_eurostat(countrycode = "country.name",
custom_dic = c(CZ = "Czech Republic")) -> tot_debt
gov_data %>% filter(na_item == "GD", sector == "S13", unit == "PC_GDP") %>%
select(time, geo, values) %>%
label_eurostat(countrycode = "country.name",
custom_dic = c(CZ = "Czech Republic")) -> rel_debt
# input
datasets <- list(rel_debt, tot_debt, tot_gdp, unemp)
plottitle <-
c(
"Government Debt in Percent of GDP",
"Government Debt in EUR Millions",
"GDP in EUR Millions",
"Total Unemployment Rate"
)
unit_label <-
c("% of GDP", "EUR Mio", "EUR Mio", "% of Labour Force")
library(shiny)
library(shinyWidgets)
library(shinythemes)
rel_debt %>%
group_by(time) %>%
summarise(values = mean(values)) %>%
mutate(geo = factor("Mean of selected countries")) %>%
merge(
rel_debt,
.,
by.x = "geo",
by.y = "geo",
all = TRUE
) %>%
mutate(
time = coalesce(time.x, time.y),
values = coalesce(values.x, values.y)
) %>%
mutate(values = round(values, digits = 1)) %>%
rename(
Time = time,
Country = geo,
Value = values
) %>%
select(Time, Country, Value) -> test
View(test)
runApp()
test %>% filter(Time == min(Time)) %>% filter(Country == "Mean of selected countries")
test %>% filter(Time == min(Time)) %>% filter(Country == "Mean of selected countries") %>% pull(Value) %>% as.character()
runApp()
runApp()
runApp()
runApp()
runApp()
?as.character
runApp()
runApp()
runApp()
runApp()
runApp()
?format
runApp()
shiny::runApp()
?p
runApp()
runApp()
